# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I28vbF8dXhwmJiREJnCb0PHHcuWaEmtf
"""

# CTC Calculator - 24/7 Persistent Deployment Options
# Choose the best option for your needs

import streamlit as st
import subprocess
import sys
import os
from datetime import datetime
import time
import threading

# =====================================================
# OPTION 1: STREAMLIT CLOUD (RECOMMENDED - FREE & PERSISTENT)
# =====================================================

"""
🎯 OPTION 1: STREAMLIT CLOUD DEPLOYMENT (BEST FOR 24/7)

Steps to deploy on Streamlit Cloud:
1. Create a GitHub repository
2. Upload your code as 'app.py'
3. Create 'requirements.txt' with dependencies
4. Go to https://share.streamlit.io/
5. Connect your GitHub repo
6. Get permanent public URL!

Benefits:
✅ 100% Free
✅ Always online (24/7)
✅ Automatic updates from GitHub
✅ Custom domain support
✅ No ngrok token needed
✅ Professional URL
"""

# Create requirements.txt content
REQUIREMENTS_TXT = """
streamlit>=1.28.0
pandas>=1.5.0
fpdf2>=2.7.0
numpy>=1.24.0
"""

# =====================================================
# OPTION 2: IMPROVED COLAB WITH AUTO-RESTART
# =====================================================

def setup_persistent_colab():
    """Enhanced Colab setup with auto-restart and monitoring"""

    print("🔧 Setting up persistent Colab deployment...")

    try:
        import google.colab
        from pyngrok import ngrok

        # Enhanced ngrok setup with better token management
        def setup_ngrok_with_retry():
            """Setup ngrok with multiple retry attempts"""

            # Try multiple tokens (add your own tokens here)
            BACKUP_TOKENS = [
                "30SvVq4pQOlMj9IQEdBKTuCpxYP_5KSw8RHmghMMqsuqHP3V7",  # Your current token
                # Add more backup tokens here for redundancy
                # "your_backup_token_1",
                # "your_backup_token_2",
            ]

            for i, token in enumerate(BACKUP_TOKENS):
                try:
                    print(f"🔐 Trying authentication token #{i+1}...")
                    ngrok.set_auth_token(token)

                    # Test the connection
                    tunnel = ngrok.connect(8501, bind_tls=True)
                    print(f"✅ Token #{i+1} successful!")
                    return tunnel

                except Exception as e:
                    print(f"⚠️ Token #{i+1} failed: {e}")
                    if i < len(BACKUP_TOKENS) - 1:
                        print("🔄 Trying next token...")
                    else:
                        print("❌ All tokens failed, trying without auth...")
                        try:
                            return ngrok.connect(8501)
                        except Exception as e2:
                            print(f"❌ No-auth connection failed: {e2}")
                            return None

        # Auto-restart mechanism
        def monitor_and_restart():
            """Monitor the app and restart if needed"""
            while True:
                try:
                    time.sleep(600)  # Check every 10 minutes

                    # Simple health check
                    import requests
                    response = requests.get("http://localhost:8501/healthz", timeout=10)

                    if response.status_code != 200:
                        print("⚠️ App seems down, attempting restart...")
                        restart_streamlit()
                    else:
                        print(f"✅ Health check passed at {datetime.now()}")

                except Exception as e:
                    print(f"🔧 Health check error: {e}")
                    time.sleep(300)  # Wait 5 minutes before next check

        def restart_streamlit():
            """Restart Streamlit server"""
            print("🔄 Restarting Streamlit server...")
            # Implementation depends on how you start your server
            pass

        # Start monitoring in background
        monitor_thread = threading.Thread(target=monitor_and_restart, daemon=True)
        monitor_thread.start()

        # Setup tunnel with retry logic
        tunnel = setup_ngrok_with_retry()

        if tunnel:
            print(f"\n🎉 PERSISTENT URL CREATED!")
            print(f"🔗 Share this link: {tunnel}")
            print("📱 This URL will stay active as long as Colab is running")

            # Save URL to file for easy access
            with open('/content/app_url.txt', 'w') as f:
                f.write(f"CTC Calculator URL: {tunnel}\nCreated: {datetime.now()}\n")

            return tunnel
        else:
            print("❌ Failed to create persistent tunnel")
            return None

    except ImportError:
        print("❌ Not running in Google Colab")
        return None

# =====================================================
# OPTION 3: REPLIT DEPLOYMENT
# =====================================================

def setup_replit_deployment():
    """Instructions for Replit deployment"""

    instructions = """
🎯 OPTION 3: REPLIT DEPLOYMENT

Steps for Replit (Free, Always Online):
1. Go to https://replit.com/
2. Create new Python project
3. Paste your code in main.py
4. Add to pyproject.toml:
   [tool.poetry.dependencies]
   python = "^3.8"
   streamlit = "^1.28.0"
   pandas = "^1.5.0"
   fpdf2 = "^2.7.0"

5. In shell, run: streamlit run main.py --server.port 8080
6. Click "Open in new tab" - you get permanent URL!

Benefits:
✅ Free tier available
✅ Always online
✅ No setup complexity
✅ Built-in editor
✅ Version control
"""

    print(instructions)

# =====================================================
# OPTION 4: PYTHONANYWHERE DEPLOYMENT
# =====================================================

def setup_pythonanywhere():
    """Instructions for PythonAnywhere deployment"""

    instructions = """
🎯 OPTION 4: PYTHONANYWHERE DEPLOYMENT

Steps for PythonAnywhere (Free tier available):
1. Sign up at https://www.pythonanywhere.com/
2. Upload your code to Files section
3. Open Bash console
4. Install dependencies: pip3.10 install --user streamlit pandas fpdf2
5. In Web tab, create new web app
6. Set it to run: streamlit run app.py --server.port 8000
7. Get your permanent URL: yourusername.pythonanywhere.com

Benefits:
✅ Free tier (limited hours)
✅ Paid plans for 24/7
✅ Professional hosting
✅ Custom domains
✅ Database support
"""

    print(instructions)

# =====================================================
# OPTION 5: RAILWAY DEPLOYMENT
# =====================================================

def create_railway_files():
    """Create files needed for Railway deployment"""

    # Procfile for Railway
    procfile_content = "web: streamlit run app.py --server.port=$PORT --server.address=0.0.0.0"

    # railway.json configuration
    railway_config = """{
  "build": {
    "builder": "NIXPACKS"
  },
  "deploy": {
    "startCommand": "streamlit run app.py --server.port=$PORT --server.address=0.0.0.0",
    "healthcheckPath": "/_stcore/health"
  }
}"""

    print("📁 Files needed for Railway deployment:")
    print("\n📄 Procfile:")
    print(procfile_content)
    print("\n📄 railway.json:")
    print(railway_config)
    print("\n📄 requirements.txt:")
    print(REQUIREMENTS_TXT)

# =====================================================
# OPTION 6: HEROKU DEPLOYMENT
# =====================================================

def create_heroku_files():
    """Create files needed for Heroku deployment"""

    # Procfile for Heroku
    procfile_content = """web: sh setup.sh && streamlit run app.py"""

    # setup.sh for Heroku
    setup_sh = """mkdir -p ~/.streamlit/

echo "\\
[general]\\n\\
email = \\"your-email@domain.com\\"\\n\\
" > ~/.streamlit/credentials.toml

echo "\\
[server]\\n\\
headless = true\\n\\
enableCORS=false\\n\\
port = $PORT\\n\\
" > ~/.streamlit/config.toml"""

    print("📁 Files needed for Heroku deployment:")
    print("\n📄 Procfile:")
    print(procfile_content)
    print("\n📄 setup.sh:")
    print(setup_sh)
    print("\n📄 requirements.txt:")
    print(REQUIREMENTS_TXT)

# =====================================================
# ENHANCED COLAB VERSION WITH PERSISTENCE
# =====================================================

class PersistentColabApp:
    """Enhanced Colab app with persistence features"""

    def __init__(self):
        self.tunnel = None
        self.start_time = datetime.now()
        self.restart_count = 0

    def create_status_monitor(self):
        """Create a status monitoring system"""

        def status_updater():
            while True:
                try:
                    uptime = datetime.now() - self.start_time
                    print(f"\n📊 STATUS UPDATE - {datetime.now().strftime('%H:%M:%S')}")
                    print(f"⏰ Uptime: {uptime}")
                    print(f"🔄 Restart count: {self.restart_count}")
                    print(f"🔗 URL: {self.tunnel}")
                    print("━" * 50)

                    time.sleep(1800)  # Update every 30 minutes

                except Exception as e:
                    print(f"⚠️ Status monitor error: {e}")
                    time.sleep(300)

        status_thread = threading.Thread(target=status_updater, daemon=True)
        status_thread.start()
        print("📊 Status monitor started")

    def setup_auto_reconnect(self):
        """Setup automatic reconnection if tunnel fails"""

        def reconnect_monitor():
            while True:
                try:
                    time.sleep(900)  # Check every 15 minutes

                    # Test if tunnel is still active
                    if self.tunnel:
                        import requests
                        try:
                            response = requests.get(str(self.tunnel), timeout=10)
                            if response.status_code in [200, 404]:  # 404 is OK for root path
                                continue
                        except:
                            pass

                    # Tunnel seems down, attempt reconnect
                    print("🔄 Tunnel appears down, attempting reconnect...")
                    self.restart_count += 1
                    new_tunnel = setup_persistent_colab()
                    if new_tunnel:
                        self.tunnel = new_tunnel
                        print(f"✅ Reconnected! New URL: {new_tunnel}")

                except Exception as e:
                    print(f"🔧 Reconnect monitor error: {e}")
                    time.sleep(300)

        reconnect_thread = threading.Thread(target=reconnect_monitor, daemon=True)
        reconnect_thread.start()
        print("🔄 Auto-reconnect monitor started")

    def run(self):
        """Run the persistent Colab app"""
        print("🚀 Starting Persistent CTC Calculator...")

        # Start monitoring systems
        self.create_status_monitor()

        # Setup initial tunnel
        self.tunnel = setup_persistent_colab()

        if self.tunnel:
            # Start auto-reconnect
            self.setup_auto_reconnect()

            print(f"\n🎉 PERSISTENT CTC CALCULATOR IS LIVE!")
            print(f"🔗 Shareable URL: {self.tunnel}")
            print(f"📱 Share this link with anyone!")
            print(f"⏰ Started at: {self.start_time}")
            print("\n💡 IMPORTANT TIPS:")
            print("• Keep this Colab tab open")
            print("• Don't close your browser completely")
            print("• Check back periodically for status updates")
            print("• The URL will auto-reconnect if it goes down")

            # Keep the script running with periodic status
            try:
                while True:
                    time.sleep(3600)  # Sleep for 1 hour
                    print(f"⏰ Still running... Uptime: {datetime.now() - self.start_time}")

            except KeyboardInterrupt:
                print("\n🛑 App stopped by user")

        else:
            print("❌ Failed to create persistent deployment")

# =====================================================
# DEPLOYMENT RECOMMENDATION SYSTEM
# =====================================================

def recommend_deployment():
    """Recommend the best deployment option based on user needs"""

    print("🎯 DEPLOYMENT RECOMMENDATION SYSTEM")
    print("=" * 50)

    recommendations = {
        "Free & Permanent": {
            "option": "Streamlit Cloud",
            "effort": "Low",
            "reliability": "High",
            "setup_time": "5 minutes",
            "description": "Upload to GitHub, connect to Streamlit Cloud"
        },
        "Quick & Easy": {
            "option": "Replit",
            "effort": "Very Low",
            "reliability": "Medium",
            "setup_time": "2 minutes",
            "description": "Paste code, run in browser"
        },
        "Professional": {
            "option": "Railway/Heroku",
            "effort": "Medium",
            "reliability": "Very High",
            "setup_time": "15 minutes",
            "description": "Professional hosting with custom domains"
        },
        "Advanced Colab": {
            "option": "Enhanced Colab (this script)",
            "effort": "Low",
            "reliability": "Medium",
            "setup_time": "1 minute",
            "description": "Enhanced version with auto-restart"
        }
    }

    for use_case, details in recommendations.items():
        print(f"\n🎯 {use_case}:")
        print(f"   📍 Best Option: {details['option']}")
        print(f"   ⚡ Effort: {details['effort']}")
        print(f"   🔒 Reliability: {details['reliability']}")
        print(f"   ⏱️ Setup Time: {details['setup_time']}")
        print(f"   📝 Description: {details['description']}")

# =====================================================
# MAIN EXECUTION
# =====================================================

def main():
    """Main function to choose deployment method"""

    print("🎯 CTC Calculator - 24/7 Deployment Options")
    print("=" * 60)

    recommend_deployment()

    print("\n" + "=" * 60)
    print("🚀 CHOOSE YOUR DEPLOYMENT METHOD:")
    print("=" * 60)

    try:
        import google.colab
        print("\n🔧 Google Colab detected!")
        print("Running enhanced persistent version...")

        # Run enhanced Colab version
        app = PersistentColabApp()
        app.run()

    except ImportError:
        print("\n💻 Local environment detected")
        print("For 24/7 deployment, consider these options:")
        print("\n1. 🌟 Streamlit Cloud (Recommended)")
        print("2. 🚀 Replit")
        print("3. 🏢 Railway/Heroku")
        print("4. 🖥️ PythonAnywhere")

        # Create deployment files
        print("\n📁 Creating deployment files...")
        create_railway_files()
        create_heroku_files()

if __name__ == "__main__":
    main()

# =====================================================
# QUICK FUNCTIONS FOR EASY ACCESS
# =====================================================

def quick_deploy():
    """Quick deployment function"""
    print("⚡ Quick Deploy - Choose option:")
    print("1. Enhanced Colab (if in Colab)")
    print("2. Show Streamlit Cloud steps")
    print("3. Show Replit steps")

def get_streamlit_cloud_steps():
    """Get step-by-step Streamlit Cloud deployment"""
    steps = """
🌟 STREAMLIT CLOUD DEPLOYMENT (BEST FOR 24/7)

Step 1: Prepare Your Code
• Save your CTC calculator as 'app.py'
• Create 'requirements.txt' with dependencies

Step 2: GitHub Setup
• Create new GitHub repository
• Upload app.py and requirements.txt
• Make repository public

Step 3: Deploy on Streamlit Cloud
• Go to https://share.streamlit.io/
• Sign in with GitHub
• Click "New app"
• Select your repository
• Choose 'app.py' as main file
• Click "Deploy!"

Step 4: Get Your Permanent URL
• Wait for deployment (2-3 minutes)
• Get your permanent URL: https://yourapp.streamlit.app/
• Share this URL - it works 24/7!

✅ Benefits:
• 100% Free forever
• Always online (24/7)
• Automatic updates from GitHub
• Professional URL
• No maintenance needed
"""
    print(steps)

# Export key functions
__all__ = [
    'setup_persistent_colab',
    'PersistentColabApp',
    'get_streamlit_cloud_steps',
    'quick_deploy',
    'recommend_deployment'
]